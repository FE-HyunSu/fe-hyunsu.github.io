---
layout: post
title: '👨‍👦‍👦👩‍👧 React-Documents-Step04'
date: 2022-10-29
tags: [study-group]
---

## 🚇 chapter13. 접근성

- 웹 접근성은 모두가 사용할 수 있도록 웹사이트를 디자인, 개발하는 것을 의미함.
- 보조과학기술(assistive technology)들이 웹페이지들을 해석할 수 있도록 접근성을 갖추는 것이 필요함.
- 웹 접근성 : 장애인이나 고령자분들이 웹 사이트에서 제공하는 정보를 비장애인과 동등하게 접근하고 이용 할 수 있도록 보장하는 것.<br/> ㄴ 스크린 리더 소프트웨어 / 화면 확대 도구 / 음성 인식 / 키보드 오버레이
- 웹 접근성 준수는 법적의무사항임. (지능정보화기본법)<br/>[http://www.wa.or.kr/m1/sub1.asp](http://www.wa.or.kr/m1/sub1.asp){:target="\_blank"}
- React는 접근성을 갖춘 웹사이트를 만들 수 있도록 모든 지원을 하고 있으며, 대부분은 표준 HTML 기술이 사용됨.

<br/>

---

<br/>

## 🎛 chapter14. 코드 분할 (Code spliting)

- 대부분 React 앱들은 Webpack, Rollup 또는 Browserify 같은 Bundling Tool 을 사용하여 여러 파일을 하나로 병합한 Bundled file을 웹 패이지에 포함하여 한번에 전체 앱을 로드 할 수 있다.
- 프로젝트가 커질수록 번들 사이즈가 커지고, 특히 CSR 환경으로 개발된 프로젝트의 경우에는 초기 렌더링 속도가 점점 더 늦어지는 단점이 있다.
- 번들이 커지는 것을 방지하기 위해 번들을 나누는 Code splitting 방법이 있다.
- 코드 분할은 런타임에 여러 번들을 동적으로 만들고, 불러오는 것으로 Webpack, Rollup과 Browserify (factor-bundle) 같은 번들러가 지원하는 기능이다.
- Code spliting은 프로젝트를 '지연 로딩' 하게 도와주고, 사용자에게 좋은 성능을 제공한다. 프로젝트 코드의 양을 줄이지 않고, 사용자가 필요하지 않는 코드를 불러오지 않게 하여, 초기 로딩의 속도와 비용을 줄여준다.

### 🏗 1. 동적 import()

```jsx
// before
import { add } from './math';
console.log(add(16, 26));
```

- 동적 import() 사용.

```jsx
// after
import('./math').then((math) => {
  console.log(math.add(16, 26));
});
```

### 🛸 2. React.lazy

```jsx
// before
import ExpampleConponent from './ExpampleConponent';
```

- React.lazy 함수를 사용해서 동적 import를 적용.

```jsx
// after
const Main = lazy(() => import('./components/Main'));
const AboutPage = lazy(() => import('./components/AboutPage'));
const MySkillsPage = lazy(() => import('./components/MySkillsPage'));
```

### 🚔 3. Example

```jsx
const Main = lazy(() => import('./components/Main'));
const AboutPage = lazy(() => import('./components/AboutPage'));
const MySkillsPage = lazy(() => import('./components/MySkillsPage'));
const BlogPage = lazy(() => import('./components/BlogPage'));
const WorkPage = lazy(() => import('./components/WorkPage'));
const SoundBar = lazy(() => import('./subComponents/SoundBar'));

function App() {
  const location = useLocation();
  return (
    <>
      <ThemeProvider theme={lightTheme}>
        <Suspense fallback={<Loading />}>
          <SoundBar />
          <AnimatePresence exitBeforeEnter>
            <Switch location={location} key={location.pathname}>
              <Route exact path="/" component={Main} />
              <Route exact path="/about" component={AboutPage} />
              <Route exact path="/blog" component={BlogPage} />
              <Route exact path="/work" component={WorkPage} />
              <Route exact path="/skills" component={MySkillsPage} />
            </Switch>
          </AnimatePresence>
        </Suspense>
      </ThemeProvider>
    </>
  );
}
```

- React.lazy 는 동적 import() 를 호출하는 함수를 인자로 가지고, 이 함수는 React 컴포넌트를 포함하여 default export를 가진 모듈로 결정되는 Promise 를 반환해야 함.
- 또한, lazy component 는 Suspense component 하위에서 rendering 되어야하며, Suspense 는 lazy component가 로드되길 기다리는 동안 로딩 화면과 같은 예비 컨텐츠를 보여줄 수 있게 해준다.
- Code Splitting을 어느 지점에 적용해야 하는지에 대해 고민해야 한다.

<br/>

---

<br/>

## 🛍 chapter15. Context

- 일반적인 React 애플리케이션에서 데이터는 위에서 아래로 (즉, 부모로부터 자식에게) props를 통해 전달됨.
- 프로젝트의 규모가 점점 커지면서 컴포넌트가 늘어나고, 구조가 복잡해지면서 관리해야 할 state 가 많음.
- React 프로젝트에서 state의 전달 방식은 props를 통해 이루어지기 때문에, 컴포넌트 구조가 복잡할수록 state drilling이 발생됨.
- state drilling 이란, 상위 컴포넌트의 state를 하위 컴포넌트로 계속해서 전달해 목표 컴포넌트까지 props를 통해 전달하는 행위를 의미.
- 이는 컴포넌트 구조가 복잡한 프로젝트의 경우, 비효율적 구조와 소스의 가독성도 떨어짐.
- context는 트리 단계마다 명시적으로 props를 넘겨주지 않아도 많은 컴포넌트가 이러한 값을 공유하도록 할 수 있음.
- 전역적인 데이터를 공유하고 관리 할 수 있도록 만든 방법.
- 우리가 알고 있는 redux, redux-router, styled-components 등과 같은 라이브러리들도 Context API 기반으로 구현되었음.

<br/>

---

<br/>

## 🚨 chapter16. Error Boundary

- React는 16 버전부터 앱의 하위 컴포넌트 트리에서 발생하는 자바스크립트 에러를 기록하며 깨진 컴포넌트 트리 대신 폴백 UI를 보여주는 ErrorBoundary라는 개념을 도입하였음.
- ErrorBoundary를 통해 컴포넌트에서 에러가 발생했을 때 이를 캐치하여 리포팅하고, 사용자들에게 에러가 발생하여 앱이 중단되는 것이 아닌 다른 대체 화면을 보여줄 수 있다.
- ErrorBoundary를 잘 이용하여 앱단과 오류가 발생할 컴포넌트에 잘 감싸주고, 사용자에게 보여줄 화면을 잘 활용(ex-새로고침 화면 보여주기)한다면, 좋은 에러 핸들링이 될 것이다.

```jsx
// React ErrorBoundary
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // 다음 렌더링에서 폴백 UI가 보이도록 상태를 업데이트 합니다.
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // 에러 리포팅 서비스에 에러를 기록할 수도 있습니다.
    logErrorToMyService(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // 폴백 UI를 커스텀하여 렌더링할 수 있습니다.
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}
```

- 하지만 hook에는 static getDerivedStateFromError() 나 componentDidCatch() 같은 메소드가 없기 때문에 React 공식문서에는 class형 컴포넌트를 사용한 예시만 있다.
- 대체 방법으로 함수형 컴포넌트에서는 react-error-boundary라는 라이브러리를 사용할 수 있다.
- ErrorBoundary가 감지하지 못하는 에러는 try/catch 문 등을 사용하여 직접 핸들링해야 하는데 이를 쉽게 해주는 useErrorHandler 기능을 제공한다.

```jsx
> npm install --save react-error-boundary
```

- fallback UI로 사용할 컴포넌트를 생성하고 ErrorBoundary 컴포넌트로 에러 바운더리를 설정한 컴포넌트를 감싸준 후 FallbackComponent 속성에 생성한 fallback 컴포넌트를 전달하면 된다.

```jsx
function App(){
  ...
  return (
    <ErrorBoundary
          FallbackComponent={OurFallbackComponent}
        >
          <ComponentThatMightThrowAnError/>
    </ErrorBoundary>
  );
}

const OurFallbackComponent = ({ error, resetErrorBoundary }) => {
  return (
    <div>
      <h1>An error occurred: {error.message}</h1>
      <button onClick={resetErrorBoundary}>Try again</button>
    </div>
  );
};
```

- fallback 컴포넌트는 prop으로 error, resetErrorBoundary를 받게 되는데, 에러가 발생했을 때 error에는 에러 정보가 담겨있고 resetErrorBoundary는 실행 시 에러를 초기화 시킨다.

```jsx
import { useErrorHandler } from 'react-error-boundary';

function Greeting() {
  const [greeting, setGreeting] = React.useState(null);
  const handleError = useErrorHandler();

  function handleSubmit(event) {
    event.preventDefault();
    const name = event.target.elements.name.value;
    fetchGreeting(name).then((newGreeting) => setGreeting(newGreeting), handleError);
  }
  // 또는
  async function handleSubmit(event) {
    event.preventDefault();
    const name = event.target.elements.name.value;
    try {
      const newGreeting = await fetchGreeting(name);
      setGreeting(newGreeting);
    } catch (error) {
      handleError(error);
    }
  }

  return greeting ? (
    <div>{greeting}</div>
  ) : (
    <form onSubmit={handleSubmit}>
      <label>Name</label>
      <input id="name" />
      <button type="submit">get a greeting</button>
    </form>
  );
}
```

- ErrorBoundary는 비동기 코드에 대한 에러를 인지하지 못하기 때문에 흔하게 에러가 발생하는 AJAX 요청도 useErrorHandler를 사용하여 핸들링 해주어야 함.

<br/>

---

<br/>

## 🚠 chapter17. Ref 전달하기

- Ref 전달은 컴포넌트를 통해 자식 중 하나에 ref를 자동으로 전달하는 기법.
- 재사용 가능한 컴포넌트 라이브러리와 같은 어떤 컴포넌트에서는 유용할 수 있음.

```jsx
const FancyButton = React.forwardRef((props, ref) => (
  <button ref={ref} className="FancyButton">
    {props.children}
  </button>
));

// 이제 DOM 버튼으로 ref를 작접 받음.
const ref = React.createRef();
<FancyButton ref={ref}>Click me!</FancyButton>;
```

<br/>

---

<br/>

## 🏠 chapter18. Fragment

- React에서 컴포넌트가 여러 엘리먼트를 반환하는 것은 흔한 패턴.
- Fragments는 DOM에 별도의 노드를 추가하지 않고 여러 자식을 그룹화할 수 있음.

```jsx
...
    return (
      <>
        <td>Hello</td>
        <td>World</td>
      </>
    );
...
```

- Fragments에 key가 있다면 <React.Fragment> 문법으로 명시적으로 선언해야 함.

```jsx
...
  return (
    <dl>
      {props.items.map(item => (
        // React는 `key`가 없으면 key warning을 발생합니다.
        <React.Fragment key={item.id}>
          <dt>{item.term}</dt>
          <dd>{item.description}</dd>
        </React.Fragment>
      ))}
    </dl>
  );
...
```

<br/>

---

<br/>

## 🎫 참고 페이지

- [https://ko.reactjs.org/docs/accessibility.html](https://ko.reactjs.org/docs/accessibility.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/code-splitting.html](https://ko.reactjs.org/docs/code-splitting.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/context.html](https://ko.reactjs.org/docs/context.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/error-boundaries.html](https://ko.reactjs.org/docs/error-boundaries.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/forwarding-refs.html](https://ko.reactjs.org/docs/forwarding-refs.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/fragments.html](https://ko.reactjs.org/docs/fragments.html){:target="\_blank"}
- [http://www.wa.or.kr/m1/sub1.asp](http://www.wa.or.kr/m1/sub1.asp){:target="\_blank"}
- [https://hwani.dev/react-code-splitting](https://hwani.dev/react-code-splitting){:target="\_blank"}
- [https://sewonzzang.tistory.com/53](https://sewonzzang.tistory.com/53){:target="\_blank"}
- [https://developer.mozilla.org/ko/docs/Web/HTML/Element](https://developer.mozilla.org/ko/docs/Web/HTML/Element){:target="\_blank"}
- [https://velog.io/@rkd028/React-ErrorBoundary-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81-%ED%95%98%EA%B8%B0](https://velog.io/@rkd028/React-ErrorBoundary-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81-%ED%95%98%EA%B8%B0){:target="\_blank"}
- [https://velog.io/@bbaa3218/React-%EC%97%90%EB%9F%AC-%EB%B0%94%EC%9A%B4%EB%8D%94%EB%A6%ACError-Boundary](https://velog.io/@bbaa3218/React-%EC%97%90%EB%9F%AC-%EB%B0%94%EC%9A%B4%EB%8D%94%EB%A6%ACError-Boundary){:target="\_blank"}
  <br/><br/>

---
