---
layout: post
title: "🍃 MongoDB"
date: 2022-12-22
tags: [backend-study]
---

## 🦔 개요.

- MongoDB 는 C++ 로 작성된 문서(document)지향적 데이터베이스이며, 뛰어난 확장성과 성능을 자랑합니다.
- 또한, 현존하는 NoSQL 데이터베이스중에서 1위를 유지하고있기도 합니다.
- 흔히 NoSQL 이라고 해서, SQL 이 없는 데이터베이스이구나, 라고 생각 할 수도 있습니다. 하지만, 이는 잘못된 이해이며, 실은 Not Only SQL 의 약자입니다.
- 기존의 RDBMS(관계형 데이터베이스) 의 한계를 극복하기 위하여 만들어진 새로운 형태의 데이터저장소이며, 이는 MySQL, PostgreSQL 등처럼 관계형 데이터베이스가 아니므로, 고정된 스키마를 가지고있지 않으며, JOIN 같은것이 존재하지 않습니다.

<br/>

## 🐌 MongoDB 특징.

### 🥸 도큐먼트 데이터베이스

- 도큐먼트는 HTML과 같은 특정 형식의 태그 구조를 의미하며, mongoDB는 JSON(JavaScript Object Notation) 형식으로 데이터를 관리하므로 NoSQL 데이터베이스 중 도큐먼트 데이터베이스로 분류됩니다. 또한 도큐먼트는 mongoDB가 데이터를 저장하는 최소 단위이기도 합니다.
- 도큐먼트는 필드와 값의 쌍으로 구성되며, 관계를 갖는 데이터를 중첩 도큐먼트와 배열을 사용하여 1개의 도큐먼트로 표현할 수 있습니다.
- 데이터 입출력 시에는 JSON 형식의 도큐먼트를 사용하나 데이터베이스 저장 시에는 이진 포맷으로 인코딩한 BSON(Binary JSON) 형식의 도큐먼트로 변환되어 저장됩니다.

### 🥸 유연한 스키마

- 스키마의 선언 없이 필드의 추가와 삭제가 자유로운 Schema-less 구조입니다.
- 관계형 데이터베이스는 테이블 내 모든 로우(Row)의 칼럼 집합이 동일하고 같은 칼럼은 동일한 데이터 타입을 갖는 정형 스키마이나, mongoDB는 컬렉션 내 모든 도큐먼트들의 필드 집합이 동일하지 않고 같은 필드라도 데이터 타입이 다를 수 있는 비정형 스키마입니다.

### 🥸 비 관계형 데이터베이스

- mongoDB는 관계형 데이터베이스의 관계(Relationship) 개념이 없는 비 관계형 데이터베이스입니다.
- mongoDB는 조인(Join)을 지원하지 않으며, 대신 임베디드 방식의 도큐먼트 구조를 사용하거나 레퍼런스 방식의 도큐먼트 구조를 사용한 후 애플리케이션에서 조인해야 합니다.

### 🥸 비 트랜잭션

- mongoDB는 트랜잭션을 지원하지 않고 각각의 도큐먼트 단위로 처리됩니다.
- 트랜잭션을 지원하지 않으므로 Commit 또는 Rollback 개념이 없으며 모두 Auto Commit으로 처리됩니다.

<br/>

## ☘️ cloud mongoDB 설정.

- [https://cloud.mongodb.com](https://cloud.mongodb.com){:target="\_blank"} 사이트에 가입.
- Database Deployments 에서 Create.<br/>
  <img src="../assets/images/post/img_20221222_01.png" alt="" style="width:90%; max-width:600px; min-width:300px;" />

- 서비스들이 거의 유료다. FREE로 제공되는 옵션을 잘 선택해서 진행하자.
- Create a Shared Cluster > Shared<br/>
  <img src="../assets/images/post/img_20221222_02.png" alt="" style="width:90%; max-width:600px; min-width:300px;" />

- Project Access Manager 계정 등록.<br/>
  <img src="../assets/images/post/img_20221222_03.png" alt="" style="width:90%; max-width:600px; min-width:300px;" />

- Connnect your application.<br/>
  <img src="../assets/images/post/img_20221222_04.png" alt="" style="width:90%; max-width:600px; min-width:300px;" />
- DB 관리자 ID, Password 와 DB 접속 URL을 mongoose에서 사용.<br/>
  <img src="../assets/images/post/img_20221222_05.png" alt="" style="width:90%; max-width:600px; min-width:300px;" />

```js
const { MongoClient, ServerApiVersion } = require("mongodb");
const uri =
  "mongodb+srv://userName:<password>@clusterName.rwsv9qq.mongodb.net/?retryWrites=true&w=majority";
const client = new MongoClient(uri, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  serverApi: ServerApiVersion.v1,
});
client.connect((err) => {
  const collection = client.db("test").collection("devices");
  // perform actions on the collection object
  client.close();
});
```

<br/>

---

<br/>

## 🎫 참고 페이지

- [https://meetup.toast.com/posts/275](https://meetup.toast.com/posts/275){:target="\_blank"}
  <br/><br/>

---
