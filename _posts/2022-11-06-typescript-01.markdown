---
layout: post
title: "🧮 TypeScript 문법 정리"
date: 2023-01-08
tags: [frontend-study]
---

## 🐛 Type 지정.

- 변수 선언 시 변수 타입을 함께 지정.
- 타입 지정 시 Typescript 컴파일러가 컴파일단계에서 잘못된 사용 코드를 잡아낼 수 있음.

```tsx
let name: string = "mason"; // name 변수에 'mason' 이라는 값을 할당하여 해당 값은 string 타입을 가짐.
```

- 컴포넌트 예시.

```tsx
import React from "react";
// 타입 지정.
type Image = {
  src: string;
  alt: string;
};

// 초기값 설정.
interface CardProps {
  image?: Image;
  title: string;
  content: string;
}
// 컴포넌트 선언. props 타입 정보.
const Card = ({ image, title, content }: CardProps) => {
  return (
    <div>
      {image && <img src={image.src} alt={image.alt} />}
      <h3>{title}</h3>
      <p>{content}</p>
    </div>
  );
};
```

<br/>

### 🗡 매개변수 기존 조건 지정.

- short circuiting이나 조건문 대신 기본 매개변수를 사용.

```
const sample = (count?: number) => {
  const testCount = count !== undefined ? count : 10;
  // ...
}
```

- 매개변수 타입 지정 및 undefined 조건 초기값 적용.

```
const sample = (count: number = 10) => {
  // ...
}
```

<br/>

### 🪓 타입 지정 방식.

```tsx
// 명시적 타입 지정.
const name: string = `mason`;

// 별칭으로 타입 지정.
type nameType = string;
const name: nameType = `mason`;

// 객체로 타입 지정.
type typeGroup = {
  age: number;
  name: string;
};
const user: typeGroup = {
  age: 14,
  name: `mason`,
};

// interface로 타입 지정.
interface typeGroup {
  age: number;
  name: string;
}
const user: typeGroup = {
  age: 14,
  name: `mason`,
};
```

<br/>

### 🔪 Javascript 원시 타입.

- 타입스크립트 타입 지정을 위한 자바스크립트 원시타입 종류.<br/>ㄴ `string`, `number`, `boolean`, `undefined`, `null`, `symbol`, `bigint`
- 자주 접하지 못했던 `symbol`, `bigint` 타입에 대해 알아보자.
- symbol : 자바스크립트(JavaScript)에서 심볼은 원시 데이터 값(primitive value).
- BigInt : **BigInt**는 Number 원시 값이 안정적으로 나타낼 수 있는 최대치인 2^53 - 1보다 큰 정수를 표현할 수 있는 내장 객체.<br/>ㄴ BigInt 데이터 타입은 위에서 설명한 Number 데이터 타입의 한계로 최근 문법에 추가된 데이터 타입.<br/>ㄴ BigInt는 임의의 정밀도로 정수를 나타낼 수있는 JavaScript의 새로운 숫자 데이터형.<br/>ㄴ BigInt를 사용하면 숫자에 대한 안전한 정수 제한을 초과하여 큰 정수를 안전하게 저장하고 조작 할 수 있음.

```tsx
// BigInt

const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER);
// ↪ 9007199254740991

const maxPlusOne = previousMaxSafe + 1n;
// ↪ 9007199254740992n

const theFuture = previousMaxSafe + 2n;
// ↪ 9007199254740993n, this works now!

const multi = previousMaxSafe * 2n;
// ↪ 18014398509481982n

const subtr = multi – 10n;
// ↪ 18014398509481972n

const mod = multi % 10n;
// ↪ 2n

const bigN = 2n ** 54n;
// ↪ 18014398509481984n

bigN * -1n
// ↪ –18014398509481984n
```

<br/>

(정리중..)

<br/>

---

<br/>

## 🎫 참고 페이지

- [https://defineall.tistory.com/919](https://defineall.tistory.com/919){:target="\_blank"}
- [https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/BigInt){:target="\_blank"}
  <br/><br/>

---
