---
layout: post
title: "🌚 CORS"
date: 2022-12-24
tags: [frontend-study]
---

## 🌏 개요

- 공공기관 오픈 API 혹은 네이버나 카카오에서 제공하는 기업 API로 데이터 요청이 필요한 경우, CORS 에러에 막히는 경우가 종종 발생되어 기록.<br/>
  <img src="../assets/images/post/img_20221224_02.png" alt="" style="width:90%; max-width:600px; min-width:300px;" />

<br/>

## 🪸 CORS (Cross Origin Resource Share) 란?

- '교차 출처 리소스 공유'라고 하는 이 개념은 서로 다른 아이피 혹은 서버에서 데이터의 요청할 때 중요한 개념.
- 웹 어플리케이션은 리소스가 자신의 출처(프로토콜, 도메인, 포트)와 다를 때 교차출처 HTTP 요청을 실행하기 때문.<br/>
  <img src="../assets/images/post/img_20221224_01.png" alt="" style="width:90%; max-width:600px; min-width:300px;" />

<br/>

## 🛸 CORS 에러 해결방향.

- CORS 에러를 해결하는 방법은 프로젝트 환경에 따라 다양하게 있다.
- 대표적으로 클라이언트에서 처리하는 방법과 서버에서 처리하는 방법이 있고, 나머지는 디테일 구성에 따라 다름.
- 하나씩 알아보자.

<br/>

## 🛩 Nextjs 에서 CORS 에러 해결.

- React Nextjs 에서 CORS 에러를 처리하는 방법에 대해 알아보자.
- Nextjs에서 커스텀 설정을 하기 위해 root레벨에 next.config.js 또는 next.config.mjs 파일을 만들 수 있음.
- (Node.js 모듈이라 마지막에 module.exports 해줘야함)

```tsx
// next.config.js
...
const nextConfig = {
  ...,
  async rewrites() {
      return [
        {
          source: '/:path*',
          destination: `https://api.vworld.kr/:path*`,
        },
      ];
    },
  }
...
```

- Rewrites는 특정 URL을 직접 입력하면 다른 URL로 이동을 하지만 사용자에게는 마치 이동이 되지 않은 것 처럼 보여준다.
- 특정 URL을 Masking 하면서 다른 URL을 보여주는 것이다.
- 이를 통해 Nextjs 에서 CORS 에러 해결이 가능하다.

<br/>

## 🛩 Netlify 에서 CORS 에러 해결.

- 위 방법을 통해 문제가 해결되었다고 자만하지말자.
- 로컬 환경과는 다르게 서비스 배포 시 참조하지 못하는 이슈가 발생된다.
- 각 환경마다 다르겠지만, Netlify에서는 netlify.toml 파일 설정을 통해 해결했다.

```js
[[redirects]]
  from = "/req"
  to = "https://api.vworld.kr/req"
  status = 200
  force = true
  headers = {X-From = "Netlify"}
[[headers]]
  for = "/*"
  [headers.values]
    Access-Control-Allow-Origin = "*"

```

<br/>

## ☄️ 그 외 CORS 에러 해결방법.

- React Nextjs 환경 외 다양한 환경에서 CORS 에러 해결 방법들이다.
- 모든 케이스를 확인해본것은 아니지만 기억해두자.

### 🗿 (1) cors-anywhere 사이트 프록시 서버 활용.

- https://cors-anywhere.herokuapp.com
- 위 사이트가 프록시 서버 역할을 해준다.
- ```tsx
  // 사용방법.
  axios
    .get("https://cors-anywhere.herokuapp.com/https://{apiURL}")
    .then((response) => {
      console.log(response);
    });
  ```

### 🗿 (2) JSONP를 활용. (GET 요청만 가능)

- JSONP(JSON-P, JSON with Padding)
- JSONP는 클라이언트가 아닌 다른 도메인의 서버로부터 데이터를 요청하기 위해 사용됨.
- 동일-출처 정책을 우회하는 데이터의 공유를 가능하게함.
- 브라우저에서 <script> 요소는 다른 도메인(스크립트 파일)에 임베드할 수 있기 때문에 보안상 제한되는 부분에 해당하지 않고, 이점을 활용.
- 위와 같은 이유로 GET요청에 대해서만 유효하다.

```sh
$ npm install jsonp
```

```tsx
await jsonp("{apiURL}?format=jsonp", null, (error, response) => {
  console.log(response);
});
```

### 🗿 (3) package.json에 proxy 추가.

```json
// package.json
{
  ...,
  "proxy": "https://apiURL"
}
```

- api 호출 시 url host 삭제 후 호출.

```tsx
axios.get("/url").then((data) => {
  console.log(data.data);
});
```

### 🗿 (4) 미들웨어 CORS 추가. (서버설정을 직접할 수 없음)

```sh
$ npm install cors
```

```js
const cors = require("cors");
app.use(cors());
```

### 🗿 (5) 백엔드 서버에서 설정.

- 백엔드에서 특정 도메인 허용 (access-control-allow-origin)
- 서버 담당자가 access-control-allow-origin 을 \* 해주거나 특정 URL을 허용해 주어야 한다.

### 🗿 (6) 프록시 서버 구축.

- 프로젝트 내 프록시 서버를 구축. (express or koa)

### 🗿 (7) http-proxy-middleware 활용.

```sh
$ npm install http-proxy-middleware
```

<br/>

---

<br/>

## 🎫 참고 페이지

- [https://devlog.kro.kr/postitem/?name=Cors](https://devlog.kro.kr/postitem/?name=Cors){:target="\_blank"}
- [https://velog.io/@yunsungyang-omc/React-React-App%EC%97%90%EC%84%9C-CORS-%EC%9D%B4%EC%8A%88-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0](https://velog.io/@yunsungyang-omc/React-React-App%EC%97%90%EC%84%9C-CORS-%EC%9D%B4%EC%8A%88-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0){:target="\_blank"}
- [https://docs.netlify.com/routing/redirects](https://docs.netlify.com/routing/redirects){:target="\_blank"}
  <br/><br/>

---
