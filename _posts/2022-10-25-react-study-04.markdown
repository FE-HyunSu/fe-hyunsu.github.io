---
layout: post
title: '👨‍👦‍👦👩‍👧 React-Documents-Step03'
date: 2022-10-24
tags: [front-study, react]
---

## 🧾 chapter9. Forms

- React에서 Form 태그 제어 방법에 대해 알아보자.
- HTML 폼 엘리먼트는 폼 엘리먼트 자체가 내부 상태를 가지기 때문에, React의 다른 DOM 엘리먼트와 다르게 동작함.
- React에서 사용자 입력값을 제어하려면, useRef나 useState를 이용했었는데, Hooks에도 useForm 이 있음.

```jsx
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import Header from './Header';

export function App() {
  const { register, handleSubmit } = useForm();
  const [data, setData] = useState('');

  return (
    <form onSubmit={handleSubmit((data) => setData(JSON.stringify(data)))}>
      <Header />
      <input {...register('firstName')} placeholder="First name" />
      <select {...register('category', { required: true })}>
        <option value="">Select...</option>
        <option value="A">Option A</option>
        <option value="B">Option B</option>
      </select>
      <textarea {...register('aboutYou')} placeholder="About you" />
      <p>{data}</p>
      <input type="submit" />
    </form>
  );
}
```

<br/>

## 🏗 chapter10. State 끌어올리기

- 종종 동일한 데이터에 대한 변경사항을 여러 컴포넌트에 반영해야 할 필요가 있음.
- 이럴 때는 가장 가까운 공통 조상으로 state를 끌어올리는 것이 가능함.

```jsx
// A.jsx
const [editMode, setEditMode] = useState(false);
...
<SectionBox>
	<ul>
		{accountTarget &&
			accountTarget.map((item, idx) => {
				return (
					<li key={idx}>
						<AccountItem
							setEditMode={setEditMode}
							dateTime={item.dateTime}
							accountName={returnUserName(item.targetId)}
							price={item.calculation}
							description={item.description}
						/>
					</li>
				);
			})}
	</ul>
</SectionBox>
...
```

- A 컴포넌트와 B 컴포넌트간의 State 값을 전달. (setEditMode)
  <br/>

```jsx
// B.jsx
export default function AccountItem({ setEditMode, dateTime, accountName, price, description }) {
	...
}
```

<br/>

## ⏳ chapter11. 합성 vs 상속

- React는 강력한 합성 모델을 가지고 있음.
- 상속 대신 합성을 사용하여 컴포넌트 간에 코드를 재사용하는 것이 좋음.

```jsx
<Dialog
  dimmed
  title="타이틀"
  checkBoxList={[
    {
      title: '버튼명',
      isChecked: true,
      hasArrowButton: true,
    },
    {
      title: '버튼명',
      isChecked: false,
      hasArrowButton: true,
    },
    {
      title: '버튼명',
      isChecked: false,
      hasArrowButton: true,
    },
    {
      title: '버튼명',
      isChecked: false,
      hasArrowButton: true,
    },
    {
      title: '버튼명',
      isChecked: false,
      hasArrowButton: true,
    },
  ]}
  labelButtonList={[
    {
      title: '버튼레이블',
    },
  ]}
/>
```

- 합성 컴포넌트 방식

```jsx
<Dialog>
  <Dialog.Dimmed />
  <Dialog.Title>타이틀</Dialog.Title>
  <Dialog.CheckBox isChecked hasArrowButton>
    버튼명
  </Dialog.CheckBox>
  <Dialog.CheckBox hasArrowButton>버튼명</Dialog.CheckBox>
  <Dialog.CheckBox hasArrowButton>버튼명</Dialog.CheckBox>
  <Dialog.CheckBox hasArrowButton>버튼명</Dialog.CheckBox>
  <Dialog.CheckBox hasArrowButton>버튼명</Dialog.CheckBox>
  <Dialog.LabelButton>버튼레이블</Dialog.LabelButton>
</Dialog>
```

<br/>

## 🪫 chapter12. React로 생각하기

- UI를 컴포넌트 계층 구조로 나누기.
- React로 정적인 버전 만들기.
- UI state에 대한 최소한의 (하지만 완전한) 표현 찾아내기.
- State가 어디에 있어야 할 지 찾기.
- 역방향 데이터 흐름 추가하기.

<br/>

---

<br/>

## 🎫 참고 페이지

- [https://ko.reactjs.org/docs/forms.html](https://ko.reactjs.org/docs/forms.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/lifting-state-up.html](https://ko.reactjs.org/docs/lifting-state-up.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/composition-vs-inheritance.html](https://ko.reactjs.org/docs/composition-vs-inheritance.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/thinking-in-react.html](https://ko.reactjs.org/docs/thinking-in-react.html){:target="\_blank"}
- [https://www.react-hook-form.com](https://www.react-hook-form.com){:target="\_blank"}
- [https://fe-developers.kakaoent.com/2022/220731-composition-component](https://fe-developers.kakaoent.com/2022/220731-composition-component){:target="\_blank"}
  <br/><br/>

---
