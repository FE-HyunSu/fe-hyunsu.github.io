---
layout: post
title: '👨‍👦‍👦👩‍👧 React study 02'
date: 2022-10-17
tags: [front-study, react, javascript]
---

## 🚌 chapter3. 엘리먼트 렌더링 👋

### 📝 목차

- (1) 엘리먼트(Element)
- (2) 변경된 부분만 업데이트

<br/>

### 🏠 (1) 엘리먼트(Element)

- 엘리먼트(Element)는 React 앱의 가장 작은 단위.
- 엘리먼트(Element)는 화면에 표시할 내용을 기술함. (엘리먼트는 컴포넌트의 "구성 요소")

```jsx
// React 에서 <h1>Hello, mason</h1> 를 화면에 출력.
const root = ReactDOM.createRoot(document.getElementById('root'));
const element = <h1>Hello, mason</h1>;
console.log(element); // React의 DOM Element를 콘솔로 확인. (React DOM Element)
root.render(element);
```

- 브라우저의 DOM Element
  ```html
  <h1>Hello, mason</h1>
  ```
- React DOM Element

  ```javascript
  // [object Object]
  {
  	"$$typof": "Symbol(react.element)",
  	"type": "h1",
  	"key": null,
  	"ref": null,
  	"props": {
  		"children": "Hello, mason"
  	},
  	"_owner": null,
  	"_store": {}
  }
  ```

- React 엘리먼트는 브라우저 DOM 엘리먼트와 다름.
- React 엘리먼트는 일반 객체이며(plain object) 쉽게 추가가 가능.
- React DOM은 React 엘리먼트와 일치하도록 DOM을 업데이트 함.

<br/>

### (2) 변경된 부분만 업데이트

1. React DOM은 해당 엘리먼트와 그 자식 엘리먼트를 이전의 엘리먼트와 비교.
2. DOM을 원하는 상태로 만드는데 필요한 경우에만 DOM을 업데이트 함.<br/><br/><img src="../assets/images/img_study_diff.png" alt="" style="width:90%; max-width:700px; min-width:300px;" />

<br/>

---

<br/>

## 🎡 chapter4. Components와 Props

### 📝 목차

- (1) 함수 컴포넌트
- (2) 클래스 컴포넌트
- (3) 컴포넌트 합성

<br/>

### (1) 함수 컴포넌트

```jsx
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
```

- 데이터를 가진 하나의 "props" 객체 인자를 받은 후 React 엘리먼트를 return.
- JavaScript 함수이기 때문에 "함수 컴포넌트"라고 호칭함.

<br/>

### (2) 클래스 컴포넌트

```jsx
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
```

- 클래스형 :

  - state, lifeCycle 관련 기능사용 가능하다.
  - 메모리 자원을 함수형 컴포넌트보다 조금 더 사용한다.
  - 임의 메서드를 정의할 수 있다.

- 함수형 :

  - state, lifeCycle 관련 기능사용 불가능 [Hook을 통해 해결 됨]
  - 메모리 자원을 함수형 컴포넌트보다 덜 사용한다.
  - 컴포넌트 선언이 편하다.

<br/>
- 함수형이 클래스보다 후에 나왔기 때문에 더 편한 것은 사실이다.
- 그러나 과거 클래스 컴포넌트 사용한 프로젝트가 있을때, 유지보수를 위해서 알아둘 필요가 있다. (이젠 이것도 굳이..)

<br/>

### (3) 컴포넌트 합성

- 컴포넌트는 자신의 출력에 다른 컴포넌트를 참조할 수 있음.
- 이는 모든 세부 단계에서 공통적으로 컴포넌트를 사용할 수 있음을 의미함.
- React 에서는 버튼, 폼, 다이얼로그, 화면 등의 모든 것들이 컴포넌트로 표현이 가능.

```jsx
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name="Sara" />
      <Welcome name="Cahal" />
      <Welcome name="Edite" />
    </div>
  );
}
```

<br/>

---

<br/>

## 🎫 참고 페이지

- [https://ko.reactjs.org/docs/rendering-elements.html](https://ko.reactjs.org/docs/rendering-elements.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/components-and-props.html](https://ko.reactjs.org/docs/components-and-props.html){:target="\_blank"}
- [https://codepen.io/gaearon/pen/edyBaE?editors=1011](https://codepen.io/gaearon/pen/edyBaE?editors=1011){:target="\_blank"}
- [https://tonynguyenit.medium.com/how-react-virtual-dom-decide-to-update-browser-dom-91f170718733](https://tonynguyenit.medium.com/how-react-virtual-dom-decide-to-update-browser-dom-91f170718733){:target="\_blank"}
- [https://velog.io/@sdc337dc/0.%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8](https://velog.io/@sdc337dc/0.%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8){:target="\_blank"}
  <br/>
