---
layout: post
title: '👨‍👦‍👦👩‍👧 React-Documents-Step02'
date: 2022-10-21
tags: [study-group]
---

## 🌀 chapter5. State and Lifecycle

### 📝 목차

- (1) React Lifecycle
- (2) useEffect, useLayoutEffect

<br/>

### 🏠 (1) React Lifecycle

- React Hooks Lifecycle에 대해 알아봄.

<img src="../assets/images/img_lifecycle.jpeg" alt="" style="width:90%; max-width:700px; min-width:300px;" />

<strong> 🔋 1. Mount</strong>

- (1) 컴포넌트 마운팅 시작됨.
- (2) 리턴값을 렌더링함.
- (3) 렌더링된 상태를 가상돔에 그림.
- (4) 가상돔과 돔의 엘리먼트들을 비교함.
- (5) (최초마운팅) 초기 렌더링의 경우 현재 컴포넌트의 정보가 돔에 없기 때문에 모든 부분을 그림. (CSR의 단점인 초기 렌더링속도가 느린 이유)
  <br/>(업데이트시) 가상돔과 돔의 엘리먼트가 다른 부분이 감지된다면 그 부분만 돔에 업데이트 함.
- (6) 컴포넌트 내부에 useLayoutEffect, useEffect 훅을 실행.

<strong> 🪫 2. Updating (컴포넌트 생성 후 props or State가 업데이트)</strong>

- (1) 직전에 실행된 useEffect 나 유저의 인터렉션에 의해서 state 나 props 값이 변경됨.
- (2) Mounting 과정 실행. (변경된 state와 props 변경되었지만 UI에 변화가 없다면, 돔을 업데이트 하지 않음.)

<strong> 🧨 3. unMount</strong>

- 컴포넌트가 소멸할때, useEffect 내부의 return에 정의된 함수를 실행. (이것을 clean-up 함수라고 함)
- 그리고 컴포넌트가 소멸함.

<br/>

### 📟 (2) useEffect, useLayoutEffect

```javascript
// useEffect : 렌더링된 이후에 동작. (비동기)
// useLayoutEffect : 렌더링 되기 이전에 동작. (동기)
```

- useLayoutEffect 를 사용한 경험이 거의 없었는데, 해당 Hook의 특징에 대해 한번 더 상기하고 리팩토링 or 최적화 작업 시 적용해 보도록 하자.
- useLayoutEffect 는 기능상으로 useEffect와 비슷하지만 변화가 적용된 후의 값을 보여주기 때문에 유저 경험에 좋다는 장점이 있음.
- 어떤 상황에 적용하면 좋을까?

<br/>

---

<br/>

## 🧼 chapter6. 이벤트 처리하기 👋

<br/>

- 우리가 알고 있는 이벤트 처리 방식.

```javascript
<button onclick="activateLasers()">Activate Lasers</button>
```

- React에서 이벤트 처리 방식.

```jsx
<button onClick={activateLasers}>Activate Lasers</button>
```

<br/>

---

<br/>

## 🧿 chapter7. 조건부 렌더링 👋

<br/>

- React에서 조건부 렌더링은 JavaScript에서의 조건 처리와 같이 동작.
- 컴포넌트 내에서 아래와 같이 조건문으로 하위 컴포넌트 호출이 분기가 가능.

```jsx
...
return(
  <>
    {testArr.length > 0 ? <testList /> : <noContent />}
  </>
)
...
```

<br/>

---

<br/>

## 🔑 chapter8. 리스트와 Key 👋

<br/>

- JavaScript map() 함수를 사용하여 numbers 배열을 반복 실행함.
- Key는 React가 어떤 항목을 변경, 추가 또는 삭제할지 식별하는 것을 돕는다.
- key는 엘리먼트에 안정적인 고유성을 부여하기 위해 배열 내부의 엘리먼트에 지정해야 함.

```jsx
const todoItems = todos.map((todo) => <li key={todo.id}>{todo.text}</li>);
```

- 렌더링 한 항목에 대한 안정적인 ID가 없다면 최후의 수단으로 항목의 인덱스를 key로 사용할 수 있음.

```jsx
const todoItems = todos.map((todo, index) => <li key={index}>{todo.text}</li>);
```

- 항목의 순서가 바뀔 수 있는 경우 key에 index를 사용하는 것은 권장하지 않음.
- 이로 인해 성능이 저하되거나 컴포넌트의 state와 관련된 문제가 발생할 수 있기 때문.
- index를 사용한 상태에서 데이터의 변동이 있는 경우, 변경된 부분만 체크하는것이 아닌, 전체 체크함.
- 정리
  - 데이터가 변경될 여지가 있는 데이터 -> index 보단 데이터의 id 값으로.
  - 데이터가 고정적인 데이터 -> index값을 사용.

<br/>

---

<br/>

## 🎫 참고 페이지

- [https://ko.reactjs.org/docs/state-and-lifecycle.html](https://ko.reactjs.org/docs/state-and-lifecycle.html){:target="\_blank"}
- [https://ko.reactjs.org/docs/handling-events.html](https://ko.reactjs.org/docs/handling-events.html){:target="\_blank"}
- [https://github.com/Wavez/react-hooks-lifecycle](https://github.com/Wavez/react-hooks-lifecycle){:target="\_blank"}
  <br/>
